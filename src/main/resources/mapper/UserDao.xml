<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zte.auth.dao.UserDao">
    <resultMap id="userMap" type="com.zte.auth.entity.User">
        <id property="userId" column="user_id" jdbcType="BIGINT"/>
        <result property="userName" column="user_name" jdbcType="VARCHAR"/>
        <result property="creationDate" column="creation_date" jdbcType="TIMESTAMP"/>
        <result property="enabledFlag" column="enabled_flag" jdbcType="VARCHAR"/>
        <result property="lastUpdatedDate" column="last_updated_date" jdbcType="TIMESTAMP"/>
    </resultMap>
<!--parameterType：将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler） 推断出具体传入语句的参数，默认值为未设置（unset）。    -->
<!--resultType：从这条语句中返回的期望类型的类的完全限定名或别名。 注意如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身。可以使用 resultType 或 resultMap，但不能同时使用。    -->
<!--resultMap：外部 resultMap 的命名引用-->
<!--提示 JDBC 要求，如果一个列允许 null 值，并且会传递值 null 的参数，就必须要指定 JDBC Type。-->
<!--不使用@Param注解时，最好传递 Javabean。在SQL语句里就可以直接引用JavaBean的属性，而且只能引用JavaBean存在的属性。-->
   <select id="listUser" resultMap="userMap" resultType="com.zte.auth.entity.User">
       select
           user_id,
           user_name,
           creation_date,
           enabled_flag,
           last_updated_date
       from
            t_user
        where
            enabled_flag = 'Y'
        <if test="userId != null">
            and user_id = #{userId}
        </if>
        <if test="userName != null and userName != ''">
              user_name like #{userName,jdbcType=VARCHAR}
        </if>
   </select>
    <insert id="insert">
        insert into
            t_user (user_name,
                   enabled_flag,
                   creation_date,
                   last_updated_date)
        values (
                   #{username},
                   'Y',
                   now(),
                   now());
    </insert>
</mapper>